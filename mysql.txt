1、数据库的三范式？
    1NF：字段不可再分。
    2NF：有主键，非主键字段依赖主键。
    3NF：非主键字段不能相互依赖。

2、一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？
    8

4、说一下 ACID 是什么？
    A：原子性，事务不可分割，要么全部执行，要么失败。
    C：一致性，事务前后数据的完整性必须保持一直。不管成功还是失败，金额总和不会变化。
    I：隔离性，指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。
    D：持久性，事务一旦提交，就会在数据库中永久保存下来。

6、float、double、decimal 的区别是什么？
    float单精度;double双精度
    float和double都是近似存储；decimal是精确存储。
    float和decimal对sum()求和是不精确的，decimal的sum()求和是精确的。

7、 mysql 的内连接、左连接、右连接有什么区别？
    内连接：取交叉数据。
    左连接：取左边全部数据，右边交叉的数据会取出。
    右连接：取右边全部数据，左边交叉的数据会取出。   

8、mysql 索引是怎么实现的？
    B+树

9、怎么验证 mysql 的索引是否满足需求？
    explain命令来查看执行计划。

10、说一下数据库的事务隔离？
    1）读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。
    2）读已提交：一个事务提交之后，它做的变更才会被其他事务看到。
    3）可重复读(默认的隔离级别)：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据时一致的。未提交变更对其他事务也是不可见的。
    4）串行化：同一行记录，“写”会加“写锁”，“读”会加“读锁”。出现读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续访问。
    mysql默认的隔离级别是可重复读。
    oracle和sqlserver默认的隔离级别是读已经提交。
    https://www.cnblogs.com/shoshana-kong/p/10516404.html

11、说一下 mysql 常用的引擎？
    InnoDB：支持行锁、事务。
    MyIsAM：不支持行锁、事务。支持全文索引。
    索引结构不同：
        InnoDB：主键索引的叶子节点保存完整数据；辅助索引的叶子节点保存主键索引。
        MyISAM：主键索引同辅助索引一样，其叶子节点都保存的是数据的地址。

12、说一下 mysql 的行锁和表锁？
    InnoDB有行锁，MyISAM没有行锁。
    update delete insert ，InnoDB会自动给涉及的数据加排他锁（行锁+间隙锁），锁加在索引上。
    select可以通过lock in share mode和for update加锁。
    InnoDB的行锁必须要索引才能实现，否则会自动锁全表。

14、mysql 问题排查都有哪些手段？
    1）开启慢查询日志，查看慢查询的sql；
    2）使用 explain 命令查询sql语句执行计划；
    3）使用show processlist 命令查看当前所有连接信息。  
        *Command:显示当前连接的执行的命令，一般就是休眠（sleep），查询（query），连接（connect）
            休眠（sleep）造成很多 sleep 进程的可能原因有几个
            1.　使用了太多持久连接（wait_timeout默认8小时，会造成执行完之后，没释放）
            2.　程序中，没有及时关闭mysql连接
            3.　数据库查询不够优化，过度耗时。
        *Time：此这个状态持续的时间，单位是秒
        *Info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全，但是一个判断问题语句的重要依据

15、如何做到Mysql的性能优化？
    1）创建索引
    2）选择合适的引擎
    3）使用合适的字段
    4）语句优化
    5）避免死锁
    6）永久连接

16、某个表有近千万数据，CRUD比较慢，如何优化？
    1）优化索引
    2）分表

17、为什么mysql的默认隔离级别是可重复读，而oracle是读已提交？
    虽然mysql的默认隔离级别是可重复读，但是在互联网项目中一般使用读已提交这个隔离界别。
    原因：
        mysql的主从复制是基于binlog的，binlog分为三种：
            statement：记录的是修改sql语句。
            row：记录的是每行实际数据的变更。
            mixed：statement和row模式的混合。
        mysql在5.0之前，binlog只支持statement这种格式，而这种格式在读已提交这个隔离界别下主从复制是有bug的，因此mysql将可重复读作为默认的隔离界别。
        在读已提交隔离级别下，主从复制的binlog使用row格式，Innodb的创始人也是建议该格式。
    
18、什么是脏读、不可重复读、幻读？
    隔离界别      脏读  不可重复读     幻读
    读未提交      Y      Y            Y
    读已提交      N      Y            Y
    可重复读      N      N            Y
    串行化        N      N            N

    脏读：读取了未提交的数据。
    不可重复读：一个事务内，前后读取内容不一致。
    幻读：一个事务内，前后读取的数据总量不一致（有插入或删除行，间隙锁解决幻读）。

19、高并发下，如何做到安全的修改同一行数据？
    乐观锁：可以加版本号。
    悲观锁：select ... for update 或 select ... lock in share mode
          begin;//开始事务
          select * from order where id=989879 for update;//查询信息
          // 或 select * from order where id=989879 lock in share mode;
          update order set name='names';//修改信息
          commit;//提交事务

20、mysql中in 和exists 区别？
    exists：
        select *　from A where exists (select * from B where A.id=B.id);
        对外表做loop循环，每次循环再对内表进行查询，对内表使用索引可用大表，而外表无论多大都要遍历，不可避免（可用小表）。
    in：
        select * from A where A.id in (select id from B);
        先查询内表，再把内表结果与外表匹配，对外表使用索引，可用大表，而内表多大都需要查询，不可避免，可用小表。
    总结：使用索引的表可大。

21、select for update 是什么含义，会锁表还是锁行或是其他？
    加锁。
    for update仅仅适用于InnoDB，且必须在事务中。

22、乐观锁和悲观锁是什么，INNODB的标准行级锁有哪2种，解释其含义？
    对于update、delete、insert语句，InnoDB会自动给涉及数据集加排他锁（X）;对于普通select语句，InnoDB不会加任何锁。可以在事务中显示加锁：
    共享锁（S）：select * from table_name where ... lock in share mode;
    排他锁（X）：select * from table_name where ... for update;

23、SQL优化的一般步骤是什么，怎么看执行计划，如何理解其中各个字段的含义？

24、mysql自增主键的问题？
    InnoDB表如果不设置自增主键，会有一个隐藏的自增主键，这个隐藏的主键有大小限制，当达到最大值后会从头循环，所以会覆盖数据。
    mysql重启后自增主键会重置为当前列最大值加1。
    分表下自增主键要设置不能的间隔或起始。

25、数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁。
    两个事务交叉：
    select ... lock in share mode;
    update
    就会死锁。
    解决死锁：1）死锁等待，等待一定时间后主动退出；2）死锁检测，事务加入后主动检测是否因为自身的加入导致死锁。

27、为什么要用Btree实现，它是怎么分裂的，什么时候分裂，为什么是平衡的。

28、Mysql怎么优化table scan的。

29、如何写sql能够有效的使用到复合索引。

30、MVCC的含义，如何实现的。

31、你做过的项目里遇到分库分表了吗，怎么做的，有用到中间件么，比如sharding jdbc等,他们的原理知道么。

32、MYSQL的主从延迟怎么解决。

33、mysql数据库锁表怎么解决？
    答：查询锁表信息
        当前运行的所有事务
        select * from information_schema.innodb_trx
        当前出现的锁
        select * from information_schema.innodb_locks
        锁等待的对应关系
        select * from information_schema.innodb_lock_waits  
        通过 select * from information_schema.innodb_trx 查询 trx_mysql_thread_id然后执行 kill 线程ID
        KILL   8807;//后面的数字即时进程的ID

35、索引失效场景
    1）不遵守最左前缀原则。
    2）隐式转换。
    3）在索引列上进行运算。
    4）在索引列上使用内部函数。
    5）使用or分割的条件。or前有索引，or后没有，则不会用到索引。
    6）not in 和 <>

36、mysql索引为什么使用B+树
    1）B+树只有叶子节点存放数据，其余节点用来索引。 
    2）所有记录的节点按大小顺序存放到同一层的叶子节点中，各个叶子节点用指针连接，顺序查询性能更高。
    3）每层可以包含更多的节点，降低树的高度，将数据范围变为多个区间，区间越多，数据检索越快。
    hash索引在等值查询时候有绝对优势，直接定位。但在范围查询的时候无用武之地了。

37、数据库锁表的相关处理
    表锁：lock tables ... read/write
            unlock tables
    MDL锁：语句执行时申请，事务提交后释放。

38、单个索引、联合索引、主键索引
    普通索引：ALTER TABLE table_name ADD INDEX index_name (column_list)
    唯一索引：值唯一，但允许有空值。ALTER TABLE table_name ADD UNIQUE (column_list)
    主键索引：值唯一，不允许有空值。ALTER TABLE table_name ADD PRIMARY KEY (column_list)
    全文索引：仅仅可用于MyISAM。针对较大的数据，生成全文索引。
    组合索引：多字段联合的索引，遵循最左前缀原则。

39、MySql的主从实时备份同步的配置，以及原理(从库读主库的binlog)，读写分离
    
40、事物的四个特性，以及各自的特点（原子、隔离）等等，项目怎么解决这些问题
    ACID
    原子性：事务不可再分割，要么全部执行，要么失败。
    一致性：事务前后数据一致。加多少就减多少。
    隔离性：多个事务并发处理时，互不干扰。
    持久性：事务一旦提交，其对数据库的改变就是永久性的。
    隔离界别：
      1）Oracle、SqlServer中都是选择读已提交作为默认的隔离级别。
      Mysql的默认的隔离级别是读未提交。
      2）建议mysql的事务隔离级别设置为“读已提交”。
      在RC级别下，不可重复读问题需要解决吗？不用解决，可以接受，毕竟数据都已经提交了。读出来本身就没有太大问题。
      3）statement:记录的是修改SQL语句。
         row：记录的是每行实际数据的变更。
         mixed：statement和row模式的混合。
      4）脏读：一个事务读取了另一个事务未提交的数据。
         不可重复读：一个事务内多次读取表中的数据，多次结果不同。一个事务读取了另一个事务已提交的数据。
         幻读：指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。行锁只能锁住行，阻止不了插入数据，使用间隙锁解决幻读。

41、Mysql怎么分表，以及分表后如果想按条件分页查询怎么办(如果不是按分表字段来查询的话，几乎效率低下，无解)
  分表提高了单表的并发性能，
  分区提高了磁盘IO性能。
  分表：
    水平切分：hash取模、按业务逻辑（地区、年月份）
    垂直切分：把不常用的字段单独放到一张表，把大字段拆分出来放到附表，经常查询的列放到一张表。
  分区：
    范围分区（时间），hash分区，list分区。
    分区后表还是一张表，但数据分散到了多个位置。操作的时候db自动组织分区的数据。
    对用户透明。

42、Mysql索引的分类？
    FULLTEXT，HASH，BTREE，RTREE。

43、MySQL行锁是否会有死锁的情况？

44、MySQL数据库锁表怎么解决？

45、MySQL的行级锁加在哪个位置？

46、Distinct(1), Distinct(*), Distinct(column) 的区别？

47、什么是子查询、嵌套查询？
    子查询：
        1、where型子查询：把内层查询的结果作为外层查询的比较条件
        2、from型子查询：把内层的查询结果当成临时表，供外层sql再次查询。查询结果集可以当成表看待。临时表要使用一个别名。
        3.exists型子查询：把外层sql的结果，拿到内层sql去测试，如果内层的sql成立，则该行取出。内层查询是exists后的查询。
        4. any, in 子查询

48、union和union all有什么不同?
    union会去重。
    union all不去重。

49、drop、truncate与 delete区别
    drop删除表数据和表结构。
    delete删除表数据。
    truncate清空表数据，同时会重置自增id。

50、如何查看SQL的explain plan？

51、主键和外键的区别？

52、空值和NULL是什么意思?
    空字符串不占空间；NULL占空间。
    判断NULL用IS NULL或者IS NOT NULL或isfull()；判断空字符串用=''或<>''。

53、数据库日志的作用是什么？有哪些？

54、说说MySQL的binlog

55、MySQL是如何实现事务的？

56、Statement与PreparedStatement的区别

57、什么是SQL注入，如何防止SQL注入？

58、如何做批量数据操作？

59、什么是存储过程？视图？游标？

60、大表如何做分页？
    where id=120 limit 10;

61、如何实现数据库读写分离？ 如何 做集群？


63、什么是聚集索引、非聚集索引，它们的区别，如何使用？
    聚集索引：索引字段是主键；叶子节点保存的是正行数据。
    非聚集索引：索引字段不是主键；叶子节点保存的是主键的值。

64、什么是数据库的悲观锁、乐观锁，它们的区别？
    乐观锁：用代码实现，加版本号。
    悲观锁：用排他锁实现，select ... for update

65、一条SQL查询语句是如何执行的？
    客户端-->连接器（管理连接、权限验证）-->分析器（此法分析、语法分析，判断sql语句是否满足语法）-->优化器（对sql语句优化）-->执行器（执行语句）

66、NoSQL为啥比SQL快？
    数据在内存，结构简单，没有完整的锁、事务。
    Nosql是非关系型数据库，因为不需要满足关系数据库数据一致性等复杂特性所以速度快；

68、MySQL中varchar与char的区别以及varchar(50)中的50代表的涵义？
    1、varchar与char的区别
        在单字节字符集下， char（ N） 在内部存储的时候总是定长， 而且没有变长字段长度列表中。 
        在多字节字符集下面， char(N)如果存储的字节数超过 N，那么 char（ N）将和 varchar（ N）没有区别。
        在多字节字符集下面，如果存储的字节数少于 N，那么存储 N 个字节，后面补空格，补到 N 字节长度。 
        都存储变长的数据和变长字段长度列表。 varchar(N)无论是什么字节字符集，都是变长的，即都存储变长数据和变长字段长度列表。

    2、varchar(50)中50的涵义
        最多存放50个字符，varchar(50)和(200)存储hello所占空间一样，但后者在排序时会消耗更多内存，因为order by col采用fixed_length计算col长度(memory引擎也一样)。
        在早期 MySQL 版本中， 50 代表字节数，现在代表字符数。

    3、int（20）中20的涵义
        是指显示字符的长度
        不影响内部存储，只是影响带 zerofill 定义的 int 时，前面补多少个 0，易于报表展示

    4、mysql为什么这么设计
        对大多数应用没有意义，只是规定一些工具用来显示字符的个数；int(1)和int(20)存储和计算均一样；

69、date,datetime和timestamp数据类型有什么区别？
    一个完整的日期格式如下：YYYY-MM-DD HH:MM:SS[.fraction]，它可分为两部分：date部分和time部分，其中，date部分对应格式中的“YYYY-MM-DD”，time部分对应格式中的“HH:MM:SS[.fraction]”。对于date字段来说，它只支持date部分，如果插入了time部分的内容，它会丢弃掉该部分的内容，并提示一个warning。
    timestamp和datetime的相同点：
    （1） 两者都可用来表示YYYY-MM-DD HH:MM:SS[.fraction]类型的日期。
    timestamp和datetime的不同点：
    （1）两者的存储方式不一样
    对于TIMESTAMP，它把客户端插入的时间从当前时区转化为UTC（世界标准时间）进行存储。查询时，将其又转化为客户端当前时区进行返回。
    而对于DATETIME，不做任何改变，基本上是原样输入和输出。
    （2）两者所能存储的时间范围不一样
    timestamp所能存储的时间范围为：'1970-01-01 00:00:01.000000' 到 '2038-01-19 03:14:07.999999'。
    datetime所能存储的时间范围为：'1000-01-01 00:00:00.000000' 到 '9999-12-31 23:59:59.999999'。

70、innodb的事务与日志的实现方式?
    1、有多少种日志
        redo和undo
    2、日志的存放形式
        redo：在页修改的时候，先写到 redo log buffer 里面， 然后写到 redo log 的文件系统缓存里面(fwrite)，然后再同步到磁盘文件（ fsync）。
        Undo：在 MySQL5.5 之前， undo 只能存放在 ibdata*文件里面， 5.6 之后，可以通过设置 innodb_undo_tablespaces 参数把 undo log 存放在 ibdata*之外。
    3、事务是如何通过日志来实现的，说得越深入越好
        基本流程如下：
        因为事务在修改页时，要先记 undo，在记 undo 之前要记 undo 的 redo， 然后修改数据页，再记数据页修改的 redo。 Redo（里面包括 undo 的修改） 一定要比数据页先持久化到磁盘。 当事务需要回滚时，因为有 undo，可以把数据页回滚到前镜像的
        状态，崩溃恢复时，如果 redo log 中事务没有对应的 commit 记录，那么需要用 undo把该事务的修改回滚到事务开始之前。 如果有 commit 记录，就用 redo 前滚到该事务完成时并提交掉。

71、innodb的读写参数优化？
    1、读取参数
        global buffer 以及 local buffer：
        Global buffer：
        Innodb_buffer_pool_size
        innodb_log_buffer_size
        innodb_additional_mem_pool_size

        local buffer(下面的都是 server 层的 session 变量，不是 innodb 的)：
        Read_buffer_size
        Join_buffer_size
        Sort_buffer_size
        Key_buffer_size
        Binlog_cache_size

    2、写入参数
        innodb_flush_log_at_trx_commit
        innodb_buffer_pool_size
        insert_buffer_size
        innodb_double_write
        innodb_write_io_thread
        innodb_flush_method

    3、与IO相关的参数
        innodb_write_io_threads = 8
        innodb_read_io_threads = 8
        innodb_thread_concurrency = 0
        Sync_binlog
        Innodb_flush_log_at_trx_commit
        Innodb_lru_scan_depth
        Innodb_io_capacity
        Innodb_io_capacity_max
        innodb_log_buffer_size
        innodb_max_dirty_pages_pct

    4、缓存参数以及缓存的适用场景
        query cache/query_cache_type
        并不是所有表都适合使用query cache。造成query cache失效的原因主要是相应的table发生了变更
        第一个：读操作多的话看看比例，简单来说，如果是用户清单表，或者说是数据比例比较固定，比如说商品列表，是可以打开的，前提是这些库比较集中，数据库中的实务比较小。
        第二个：我们“行骗”的时候，比如说我们竞标的时候压测，把query cache打开，还是能收到qps激增的效果，当然前提示前端的连接池什么的都配置一样。大部分情况下如果写入的居多，访问量并不多，那么就不要打开，例如社交网站的，10%的人产生内容，其余的90%都在消费，打开还是效果很好的，但是你如果是qq消息，或者聊天，那就很要命。
        第三个：小网站或者没有高并发的无所谓，高并发下，会看到 很多 qcache 锁 等待，所以一般高并发下，不建议打开query cache

72、备份计划，mysqldump以及xtranbackup的实现原理?
    (1)、备份计划
        视库的大小来定，一般来说 100G 内的库，可以考虑使用 mysqldump 来做，因为 mysqldump更加轻巧灵活，备份时间选在业务低峰期，可以每天进行都进行全量备份(mysqldump 备份
        出来的文件比较小，压缩之后更小)。100G 以上的库，可以考虑用 xtranbackup 来做，备份速度明显要比 mysqldump 要快。一般是选择一周一个全备，其余每天进行增量备份，备份时间为业务低峰期。

    (2)、备份恢复时间
        物理备份恢复快，逻辑备份恢复慢
        这里跟机器，尤其是硬盘的速率有关系，以下列举几个仅供参考
        20G的2分钟（mysqldump）
        80G的30分钟(mysqldump)
        111G的30分钟（mysqldump)
        288G的3小时（xtra)
        3T的4小时（xtra)
        逻辑导入时间一般是备份时间的5倍以上

    (3)、备份恢复失败如何处理
        首先在恢复之前就应该做足准备工作，避免恢复的时候出错。比如说备份之后的有效性检查、权限检查、空间检查等。如果万一报错，再根据报错的提示来进行相应的调整。

    (4)、mysqldump和xtrabackup实现原理
        mysqldump：
        mysqldump 属于逻辑备份。
        加入--single-transaction 选项可以进行一致性备份。后台进程会先设置 session 的事务隔离级别为 RR(SET SESSION TRANSACTION ISOLATION LEVELREPEATABLE READ)，
        之后显式开启一个事务(START TRANSACTION /*!40100 WITH CONSISTENTSNAPSHOT */)，这样就保证了该事务里读到的数据都是事务事务时候的快照。之后再把表的数据读取出来。 
        如果加上--master-data=1 的话，在刚开始的时候还会加一个数据库的读锁(FLUSH TABLES WITH READ LOCK),等开启事务后，再记录下数据库此时 binlog 的位置(showmaster status)，马上解锁，再读取表的数据。等所有的数据都已经导完，就可以结束事务

        Xtrabackup:
        xtrabackup 属于物理备份，直接拷贝表空间文件，同时不断扫描产生的 redo 日志并保存下来。最后完成 innodb 的备份后，会做一个 flush engine logs 的操作(老版本在有 bug，在5.6 上不做此操作会丢数据)，确保所有的 redo log 都已经落盘(涉及到事务的两阶段提交
        概念，因为 xtrabackup 并不拷贝 binlog，所以必须保证所有的 redo log 都落盘，否则可能会丢最后一组提交事务的数据)。这个时间点就是 innodb 完成备份的时间点，数据文件虽然不是一致性的，但是有这段时间的 redo 就可以让数据文件达到一致性(恢复的时候做的事
        情)。然后还需要 flush tables with read lock，把 myisam 等其他引擎的表给备份出来，备份完后解锁。 这样就做到了完美的热备。
        
73、MySQL binlog的几种日志录入格式以及区别?
    (1)、 各种日志格式的涵义
        1.Statement：每一条会修改数据的sql都会记录在binlog中。
        优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。(相比row能节约多少性能 与日志量，这个取决于应用的SQL情况，正常同一条记录修改或者插入row格式所产生的日志量还小于Statement产生的日志量，
        但是考虑到如果带条 件的update操作，以及整表删除，alter表等操作，ROW格式会产生大量日志，因此在考虑是否使用ROW格式日志时应该跟据应用的实际情况，其所 产生的日志量会增加多少，以及带来的IO性能问题。)
        缺点：由于记录的只是执行语句，为了这些语句能在slave上正确运行，因此还必须记录每条语句在执行的时候的 一些相关信息，以保证所有语句能在slave得到和在master端执行时候相同 的结果。另外mysql 的复制,
        像一些特定函数功能，slave可与master上要保持一致会有很多相关问题(如sleep()函数， last_insert_id()，以及user-defined functions(udf)会出现问题).
        使用以下函数的语句也无法被复制：
        * LOAD_FILE()
        * UUID()
        * USER()
        * FOUND_ROWS()
        * SYSDATE() (除非启动时启用了 --sysdate-is-now 选项)
        同时在INSERT ...SELECT 会产生比 RBR 更多的行级锁

        2.Row:不记录sql语句上下文相关信息，仅保存哪条记录被修改。
        优点： binlog中可以不记录执行的sql语句的上下文相关的信息，仅需要记录那一条记录被修改成什么了。所以rowlevel的日志内容会非常清楚的记录下 每一行数据修改的细节。而且不会出现某些特定情况下的存储过程，或function，以及trigger的调用和触发无法被正确复制的问题
        缺点:所有的执行的语句当记录到日志中的时候，都将以每行记录的修改来记录，这样可能会产生大量的日志内容,比 如一条update语句，修改多条记录，则binlog中每一条修改都会有记录，这样造成binlog日志量会很大，特别是当执行alter table之类的语句的时候，
        由于表结构修改，每条记录都发生改变，那么该表每一条记录都会记录到日志中。

        3.Mixedlevel: 是以上两种level的混合使用，一般的语句修改使用statment格式保存binlog，如一些函数，statement无法完成主从复制的操作，则 采用row格式保存binlog,MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，
        也就是在Statement和Row之间选择 一种.新版本的MySQL中队row level模式也被做了优化，并不是所有的修改都会以row level来记录，像遇到表结构变更的时候就会以statement模式来记录。至于update或者delete等修改数据的语句，还是会记录所有行的变更。

    (2)、适用场景
        在一条 SQL 操作了多行数据时， statement 更节省空间， row 更占用空间。但是 row模式更可靠。

    (3)、结合第一个问题，每一种日志格式在复制中的优劣
        Statement 可能占用空间会相对小一些，传送到 slave 的时间可能也短，但是没有 row模式的可靠。 Row 模式在操作多行数据时更占用空间， 但是可靠。

74、MySQL的复制原理以及流程?
    (1)、复制基本原理流程
        1. 主：binlog线程——记录下所有改变了数据库数据的语句，放进master上的binlog中； 
        2. 从：io线程——在使用start slave 之后，负责从master上拉取 binlog 内容，放进 自己的relay log中； 
        3. 从：sql执行线程——执行relay log中的语句；

    (2)、MySQL复制的线程有几个及之间的关联
        MySQL 的复制是基于如下 3 个线程的交互（ 多线程复制里面应该是 4 类线程）：
        1. Master 上面的 binlog dump 线程，该线程负责将 master 的 binlog event 传到slave；
        2. Slave 上面的 IO 线程，该线程负责接收 Master 传过来的 binlog，并写入 relay log；
        3. Slave 上面的 SQL 线程，该线程负责读取 relay log 并执行；
        4. 如果是多线程复制，无论是 5.6 库级别的假多线程还是 MariaDB 或者 5.7 的真正的多线程复制， SQL 线程只做 coordinator，只负责把 relay log 中的 binlog读出来然后交给 worker 线程， woker 线程负责具体 binlog event 的执行；

    (3)、MySQL如何保证复制过程中数据一致性及减少数据同步延时
        一致性主要有以下几个方面：
        1.在 MySQL5.5 以及之前， slave 的 SQL 线程执行的 relay log 的位置只能保存在文件（ relay-log.info）里面，
        并且该文件默认每执行 10000 次事务做一次同步到磁盘， 这意味着 slave 意外 crash 重启时，
        SQL 线程执行到的位置和数据库的数据是不一致的，将导致复制报错，如果不重搭复制，则有可能会导致数据不一致。 
        MySQL 5.6 引入参数 relay_log_info_repository，将该参数设置为 TABLE 时， MySQL 将 SQL 线程执行到的位置存到mysql.slave_relay_log_info 表，
        这样更新该表的位置和 SQL 线程执行的用户事务绑定成一个事务，这样 slave 意外宕机后， slave 通过 innodb 的崩溃恢复可以把 SQL 线程执行到的位置和用户事务恢复到一致性的状态。
        
        2. MySQL 5.6 引入 GTID 复制，每个 GTID 对应的事务在每个实例上面最多执行一次， 这极大地提高了复制的数据一致性；
        
        3. MySQL 5.5 引入半同步复制， 用户安装半同步复制插件并且开启参数后，设置超时时间，可保证在超时时间内如果 binlog 不传到 slave 上面，那么用户提交事务时不会返回，直到超时后切成异步复制，但是如果切成异步之前用户线程提交时在 master 上面等待的时候，事务已经提交，该事务对 master
        上面的其他 session 是可见的，如果这时 master 宕机，那么到 slave 上面该事务又不可见了，该问题直到 5.7 才解决；
        
        4. MySQL 5.7 引入无损半同步复制，引入参 rpl_semi_sync_master_wait_point，该参数默认为 after_sync，指的是在切成半同步之前，事务不提交，而是接收到 slave 的 ACK 确认之后才提交该事务，从此，复制真正可以做到无损的了。
        
        5.可以再说一下 5.7 的无损复制情况下， master 意外宕机，重启后发现有 binlog没传到 slave 上面，这部分 binlog 怎么办？？？
        分 2 种情况讨论， 1 宕机时已经切成异步了， 2 是宕机时还没切成异步？？？ 这个怎么判断宕机时有没有切成异步呢？？？ 分别怎么处理？？？

        延时性：
        5.5 是单线程复制， 5.6 是多库复制（对于单库或者单表的并发操作是没用的）， 5.7 是真正意义的多线程复制，它的原理是基于 group commit， 只要
        master 上面的事务是 group commit 的，那 slave 上面也可以通过多个 worker线程去并发执行。 和 MairaDB10.0.0.5 引入多线程复制的原理基本一样。

    (4)、工作遇到的复制 bug 的解决方法
        5.6 的多库复制有时候自己会停止，我们写了一个脚本重新 start slave;待补充…

75、sql执行慢的原因有哪些，如何进行sql优化?
    一、导致SQL执行慢的原因
        1、硬件问题。如网络速度慢，内存不足，I/O吞吐量小，磁盘空间满了等。
        2、没有索引或者索引失效。（一般在互联网公司，DBA会在半夜把表锁了，重新建立一遍索引，因为当你删除某个数据的时候，索引的树结构就不完整了。所以互联网公司的数据做的是假删除，一是为了做数据分析,二是为了不破坏索引 ）
        3、数据过多（分库分表）
        4、服务器调优及各个参数设置（调整my.cnf）

    二、分析原因时，一定要找切入点
        1、先观察，开启慢查询日志，设置相应的阈值（比如超过3秒就是慢SQL），在生产环境跑上个一天过后，看看哪些SQL比较慢。
        2、Explain和慢SQL分析。比如SQL语句写的烂，索引没有或失效，关联查询太多（有时候是设计缺陷或者不得以的需求）等等。
        3、Show Profile是比Explain更近一步的执行细节，可以查询到执行每一个SQL都干了什么事，这些事分别花了多少秒。
        4、找DBA或者运维对MySQL进行服务器的参数调优。
        解析：
        (1)、explain出来的各种item的意义
        id:每个被独立执行的操作的标志，表示对象被操作的顺序。一般来说， id 值大，先被执行；如果 id 值相同，则顺序从上到下。
        select_type：查询中每个 select 子句的类型。
        table:名字，被操作的对象名称，通常的表名(或者别名)，但是也有其他格式。
        partitions:匹配的分区信息。
        type:join 类型。
        possible_keys：列出可能会用到的索引。
        key:实际用到的索引。
        key_len:用到的索引键的平均长度，单位为字节。
        ref:表示本行被操作的对象的参照对象，可能是一个常量用 const 表示，也可能是其他表的
        key 指向的对象，比如说驱动表的连接列。
        rows:估计每次需要扫描的行数。
        filtered:rows*filtered/100 表示该步骤最后得到的行数(估计值)。
        extra:重要的补充信息。
        (2)、profile的意义以及使用场景
            Profile 用来分析 sql 性能的消耗分布情况。当用 explain 无法解决慢 SQL 的时候，需要用profile 来对 sql 进行更细致的分析，找出 sql 所花的时间大部分消耗在哪个部分，确认 sql的性能瓶颈。
        (3)、explain 中的索引问题
            Explain 结果中，一般来说，要看到尽量用 index(type 为 const、 ref 等， key 列有值)，避免使用全表扫描(type 显式为 ALL)。比如说有 where 条件且选择性不错的列，需要建立索引。
            被驱动表的连接列，也需要建立索引。被驱动表的连接列也可能会跟 where 条件列一起建立联合索引。当有排序或者 group by 的需求时，也可以考虑建立索引来达到直接排序和汇总的需求。

76、数据库优化的思路?
    1.SQL语句优化
        1）应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。
        2）应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：
        select id from t where num is null
        可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：
        select id from t where num=0
        3）很多时候用 exists 代替 in 是一个好的选择
        4）用Where子句替换HAVING 子句 因为HAVING 只会在检索出所有记录之后才对结果集进行过滤
    2.索引优化
        看上文索引
    3.数据库结构优化
        1）范式优化： 比如消除冗余（节省空间。。）
        2）反范式优化：比如适当加冗余等（减少join）
        3）拆分表： 分区将数据在物理上分隔开，不同分区的数据可以制定保存在处于不同磁盘上的数据文件里。这样，当对这个表进行查询时，只需要在表分区中进行扫描，而不必进行全表扫描，明显缩短了查询时间，另外处于不同磁盘的分区也将对这个表的数据传输分散在不同的磁盘I/O，一个精心设置的分区可以将数据传输对磁盘I/O竞争均匀地分散开。对数据量大的时时表可采取此方法。可按月自动建表分区。
        4）拆分其实又分垂直拆分和水平拆分：

        案例： 简单购物系统暂设涉及如下表： 1.产品表（数据量10w，稳定） 2.订单表（数据量200w，且有增长趋势） 3.用户表 （数据量100w，且有增长趋势） 以mysql为例讲述下水平拆分和垂直拆分，mysql能容忍的数量级在百万静态数据可以到千万
        垂直拆分：解决问题：表与表之间的io竞争 不解决问题：单表中数据量增长出现的压力 方案： 把产品表和用户表放到一个server上 订单表单独放到一个server上
        水平拆分： 解决问题：单表中数据量增长出现的压力 不解决问题：表与表之间的io争夺
        方案： 用户表通过性别拆分为男用户表和女用户表 订单表通过已完成和完成中拆分为已完成订单和未完成订单 产品表 未完成订单放一个server上 已完成订单表盒男用户表放一个server上 女用户表放一个server上(女的爱购物 哈哈)
    4.服务器硬件优化
        这个么多花钱咯！

77、视图的作用，视图可以更改么?
    视图是虚拟的表，与包含数据的表不一样，视图只包含使用时动态检索数据的查询；
    不包含任何列或数据。使用视图可以简化复杂的sql操作，隐藏具体的细节，保护数据；
    视图创建后，可以使用与表相同的方式利用它们。
    视图不能被索引，也不能有关联的触发器或默认值，如果视图本身内有order by 则对视图再次order by将被覆盖。
    创建视图：create view XXX as XXXXXXXXXXXXXX;
    对于某些视图比如未使用联结子查询分组聚集函数Distinct Union等，是可以对其更新的，对视图的更新将对基表进行更新；
    但是视图主要用于简化检索，保护数据，并不用于更新，而且大部分视图都不可以更新。

78、存储过程与触发器的区别？
    触发器与存储过程非常相似，触发器也是SQL语句集，两者唯一的区别是触发器不能用EXECUTE语句调用，
    而是在用户执行Transact-SQL语句时自动触发（激活）执行。触发器是在一个修改了指定表中的数据时执行的存储过程。
    通常通过创建触发器来强制实现不同表中的逻辑相关数据的引用完整性和一致性。
    由于用户不能绕过触发器，所以可以用它来强制实施复杂的业务规则，以确保数据的完整性。
    触发器不同于存储过程，触发器主要是通过事件执行触发而被执行的，而存储过程可以通过存储过程名称名字而直接调用。当
    对某一表进行诸如UPDATE、INSERT、DELETE这些操作时，SQLSERVER就会自动执行触发器所定义的SQL语句，
    从而确保对数据的处理必须符合这些SQL语句所定义的规则。

    存储过程缺点：
        依赖数据库，切换数据库还要重写。
        不好调试。

79、如何在最快时间之内重启500台db？
    可以使用批量 ssh 工具 pssh 来对需要重启的机器执行重启命令。 
    也可以使用 salt（前提是客户端有安装 salt）或者 ansible（ ansible 只需要 ssh 免登通了就行）等多线程工具同时操作多台服务器。

80、一条语句执行的很慢的原因有哪些？
    1、没有加索引
    2、索引没生效
    3、刷新脏页
    4、拿不到锁

81、mysql给离散度低的字段建立索引会出现什么问题，具体说下原因？
    重复性较强的字段，不适合添加索引。
    可能会更慢。
    如果给一个离散度低的字段创建索引，那么如果该字段是个普通索引的话，则会先查找索引，然后再去找其他字段数据。

82、sql语法（join，union，子查询，having，group by）
    where关键字无法与聚合函数一起使用。
    SELECT Websites.name, Websites.url, SUM(access_log.count) AS nums FROM (access_log
    INNER JOIN Websites
    ON access_log.site_id=Websites.id)
    GROUP BY Websites.name
    HAVING SUM(access_log.count) > 200;

83、数据库的锁（行锁，表锁，页级锁，意向锁，读锁，写锁，悲观锁，乐观锁，以及加锁的select sql方式）
     